TestCase subclass: #CircleTest	instanceVariableNames: 'pi circle largerCircle'	classVariableNames: ''	package: 'MyShapes'!!CircleTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 15:18'!testLengthself assert: circle length equals: pi + pi.self assert: largerCircle length equals: 10 * pi.! !!CircleTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 15:21'!testPrintOnself assert: Circle new printString equals: 'Circle(1)'! !!CircleTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 15:19'!testAreaself assert: circle area equals: pi.self assert: largerCircle area equals: 25 * pi.! !!CircleTest methodsFor: 'running' stamp: 'SergYaroshko 10/11/2022 15:17'!setUp	super setUp.		"Put here a common initialization logic for tests"	pi := Float pi.	circle := Circle new.	largerCircle := Circle radius: 5.! !Object subclass: #FlatShape	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!FlatShape methodsFor: 'comparing' stamp: 'SergYaroshko 10/11/2022 15:38'!< aShape^ self area < aShape area! !!FlatShape methodsFor: 'comparing' stamp: 'SergYaroshko 10/11/2022 15:37'!> aShape^ self area > aShape area! !!FlatShape methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 14:35'!area ^ self subclassResponsibility ! !!FlatShape methodsFor: 'calculating' stamp: 'SergYaroshko 10/4/2022 17:35'!perimeter ^ self subclassResponsibility ! !FlatShape subclass: #Circle	instanceVariableNames: 'r'	classVariableNames: ''	package: 'MyShapes'!!Circle methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 14:36'!area^ r squared * Float pi ! !!Circle methodsFor: 'calculating' stamp: 'SergYaroshko 10/4/2022 17:41'!perimeter ^ 2 * Float pi * r! !!Circle methodsFor: 'initialization' stamp: 'SergYaroshko 10/4/2022 17:37'!initialize r := 1! !!Circle methodsFor: 'accessing' stamp: 'SergYaroshko 10/4/2022 17:41'!length ^ self perimeter ! !!Circle methodsFor: 'accessing' stamp: 'SergYaroshko 10/11/2022 15:14'!radius: aNumber 	r := aNumber max: 0.1! !!Circle methodsFor: 'printing' stamp: 'SergYaroshko 10/11/2022 15:02'!printOn: aStreamaStream nextPutAll: 'Circle('.r printOn: aStream.aStream nextPut: $)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Circle class	instanceVariableNames: ''!!Circle class methodsFor: 'accessing' stamp: 'SergYaroshko 10/11/2022 15:12'!radius: aNumber ^self new radius: aNumber ! !FlatShape subclass: #Rect	instanceVariableNames: 'a b s'	classVariableNames: ''	package: 'MyShapes'!!Rect methodsFor: 'as yet unclassified' stamp: 'SergYaroshko 10/11/2022 14:55'!outR^ self diagonal / 2! !!Rect methodsFor: 'initialization' stamp: 'SergYaroshko 10/4/2022 17:16'!initialize a := 3. b := 4. s := 12! !!Rect methodsFor: 'printing' stamp: 'SergYaroshko 10/4/2022 16:57'!printOn: aStream   aStream nextPutAll: 'Rectangle['.	a printOn: aStream.	aStream nextPut: $x.	b printOn: aStream.	aStream nextPut: $]! !!Rect methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 16:48'!area ^ self a * self b "^ s"! !!Rect methodsFor: 'calculating' stamp: 'SergYaroshko 10/4/2022 17:10'!perimeter^ (self a + self b) * 2! !!Rect methodsFor: 'row/column operations' stamp: 'SergYaroshko 10/11/2022 14:41'!diagonal^(a squared + b squared) sqrt! !!Rect methodsFor: 'accessing' stamp: 'SergYaroshko 10/4/2022 17:08'!b	^ b! !!Rect methodsFor: 'accessing' stamp: 'SergYaroshko 10/4/2022 17:08'!a	^ a! !!Rect methodsFor: 'accessing' stamp: 'SergYaroshko 10/4/2022 17:18'!a: aNumber 	a := aNumber max: 0.1.	s := a * b! !!Rect methodsFor: 'accessing' stamp: 'SergYaroshko 10/4/2022 17:20'!b: aNumber 	b := aNumber max: 0.1.	s := a * b! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rect class	instanceVariableNames: ''!!Rect class methodsFor: 'instance creation' stamp: 'SergYaroshko 10/11/2022 14:50'!width: w height: h  "| inst |  inst := self new.  inst a: w; b: h.  ^ inst"^ self new a: w; b: h! !Rect subclass: #Parallel	instanceVariableNames: 'h'	classVariableNames: ''	package: 'MyShapes'!!Parallel methodsFor: 'initialization' stamp: 'RostyslvaBoichuk 10/24/2022 21:56'!initialize  a := 5. h:=3. self b: 5.! !!Parallel methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 20:02'!printOn: aStream   aStream nextPutAll: 'Parallelogram['.	self a printOn: aStream.	self b printOn: aStream.	h printOn: aStream.	aStream nextPut: $]! !!Parallel methodsFor: 'calculating' stamp: 'RostyslvaBoichuk 10/24/2022 21:57'!areaa * h ! !!Parallel methodsFor: 'calculating' stamp: 'RostyslvaBoichuk 10/24/2022 21:59'!perimeter 2 * (a + b)! !TestCase subclass: #RectTest	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!RectTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 14:48'!testCreation  | r |r := Rect width: 5 height: 4.self assert: r a equals: 5.self assert: r b equals: 4.self assert: r area equals: 20.! !!RectTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 14:52'!testPerimeterself assert: Rect new perimeter equals: 14.self assert: (Rect width: 5 height: 10) perimeter equals: 30.! !!RectTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 14:46'!testInitialize| r |r := Rect new.self assert: r a equals: 3.self assert: r b equals: 4.self assert: r area equals: 12.! !!RectTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 14:37'!testArea  | a b | a := Rect new. b := Rect width: 5 height: 10. self assert: a area equals: 12. self assert: b area equals: 50.! !Rect subclass: #Square	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!Square methodsFor: 'initialization' stamp: 'SergYaroshko 10/4/2022 17:27'!initialize  a := 5. self b: 5.! !!Square methodsFor: 'calculating' stamp: 'RostyslvaBoichuk 10/24/2022 21:50'!area ^ a * h ! !!Square methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 14:56'!inR^ self a / 2! !!Square methodsFor: 'calculating' stamp: 'RostyslvaBoichuk 10/24/2022 21:50'!perimeter ^ (a * 2) + (b * 2)  ! !!Square methodsFor: 'printing' stamp: 'SergYaroshko 10/11/2022 14:40'!printOn: aStream   aStream nextPutAll: 'Square['.	self a printOn: aStream.	aStream nextPut: $]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Square class	instanceVariableNames: ''!!Square class methodsFor: 'instance creation' stamp: 'SergYaroshko 10/11/2022 15:09'!width: a height: b"^ self side: a"^ self error: 'Use side: to create a square' ! !!Square class methodsFor: 'accessing' stamp: 'SergYaroshko 10/11/2022 15:05'!side: w"^ self new a: w; b: w"^super width: w height: w! !TestCase subclass: #SquareTest	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!SquareTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 15:04'!testCreation self assert: (Square side: 3) a equals: 3.self assert: (Square side: 7) b equals: 7.! !!SquareTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 15:00'!testInR self assert: Square new inR equals: 2.5.! !!SquareTest methodsFor: 'tests' stamp: 'SergYaroshko 10/11/2022 14:59'!testInitialize | s |s := Square new.self assert: s a equals: s b.self assert: s a equals: 5.self assert: s area equals: 25.! !Rect subclass: #Trapecia	instanceVariableNames: 'h'	classVariableNames: ''	package: 'MyShapes'!!Trapecia methodsFor: 'accessing' stamp: 'RostyslvaBoichuk 10/24/2022 20:01'!area(( a + b ) / 2 ) * h! !!Trapecia methodsFor: 'initialization' stamp: 'RostyslvaBoichuk 10/24/2022 20:00'!initialize  a := 10. h:=5. self b: 5.! !!Trapecia methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 20:02'!printOn: aStream   aStream nextPutAll: 'Trapecia['.	self a printOn: aStream.	self b printOn: aStream.	h printOn: aStream.	aStream nextPut: $]! !FlatShape subclass: #Triangle	instanceVariableNames: 'a b gamma'	classVariableNames: ''	package: 'MyShapes'!!Triangle methodsFor: 'initialization' stamp: 'SergYaroshko 10/11/2022 15:26'!initialize a := 3.b := 3.gamma := 60! !!Triangle methodsFor: 'accessing' stamp: 'SergYaroshko 10/11/2022 15:32'!b: aNumber 	b := aNumber max: 0.1! !!Triangle methodsFor: 'accessing' stamp: 'SergYaroshko 10/11/2022 15:32'!a: aNumber 	a := aNumber max: 0.1! !!Triangle methodsFor: 'accessing' stamp: 'SergYaroshko 10/11/2022 15:35'!gamma: aNumber 	gamma := (aNumber max: 1) min: 179! !!Triangle methodsFor: 'printing' stamp: 'SergYaroshko 10/11/2022 15:28'!printOn: aStream aStream nextPutAll: 'Triangle<'.a printOn: aStream .aStream nextPut: $,.b printOn: aStream .aStream nextPut: $,.gamma printOn: aStream .aStream nextPut: $>! !!Triangle methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 15:36'!area ^ a * b * self gammaInRadians sin / 2 ! !!Triangle methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 15:39'!inR ^ self area / self perimeter * 2! !!Triangle methodsFor: 'calculating' stamp: 'SergYaroshko 10/11/2022 15:36'!perimeter ^ a + b + self sideC  ! !!Triangle methodsFor: 'private' stamp: 'SergYaroshko 10/11/2022 15:25'!sideC^ (a squared + b squared - (2 * a * b * self gammaInRadians cos)) sqrt! !!Triangle methodsFor: 'private' stamp: 'SergYaroshko 10/11/2022 15:23'!gammaInRadians^ gamma / 180 * Float pi.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Triangle class	instanceVariableNames: ''!!Triangle class methodsFor: 'as yet unclassified' stamp: 'SergYaroshko 10/11/2022 15:30'!sideA: aNumber sideB: bNumber andAngle: grad^ self new a: aNumber; b: bNumber; gamma: grad! !Object subclass: #VolShape	instanceVariableNames: 'base height'	classVariableNames: ''	package: 'MyShapes'!!VolShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:12'!totalArea ^ self subclassResponsibility ! !!VolShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:12'!volume ^ self subclassResponsibility ! !!VolShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:12'!sideArea ^ self subclassResponsibility ! !!VolShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:13'!baseArea ^ base area ! !VolShape subclass: #ConeShape	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!ConeShape methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 20:15'!printOn: aStream self subclassResponsibility ! !ConeShape subclass: #Cone	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!Cone methodsFor: 'initialization' stamp: 'RostyslvaBoichuk 10/24/2022 20:14'!initialize  base := Circle new. height := 1! !!Cone methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 20:18'!volume  base area  * height * 1/3! !!Cone methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 20:15'!printOn: aStreamaStream nextPutAll: 'Cone of height '.height printOn: aStream .aStream nextPutAll: ' on '.base printOn: aStream ! !!Cone methodsFor: 'calculations' stamp: 'RostyslvaBoichuk 10/24/2022 22:36'!sideArea Float pi * base radius * height  ! !!Cone methodsFor: 'calculations' stamp: 'RostyslvaBoichuk 10/24/2022 22:38'!totalArea Float pi * base radius * height + base area ! !VolShape subclass: #DirectShape	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!DirectShape methodsFor: 'printing' stamp: 'SergYaroshko 10/11/2022 17:28'!printOn: aStream self subclassResponsibility ! !!DirectShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:16'!volume ^ self baseArea * height  ! !!DirectShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:15'!sideArea ^ base perimeter * height ! !!DirectShape methodsFor: 'calculations' stamp: 'SergYaroshko 10/11/2022 17:16'!totalArea ^ self baseArea * 2 + self sideArea ! !DirectShape subclass: #Cube	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!Cube methodsFor: 'initialization' stamp: 'RostyslvaBoichuk 10/24/2022 22:24'!initialize  base := Square  new. height := 3! !!Cube methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 22:21'!printOn: aStreamaStream nextPutAll: 'Cube of height '.height printOn: aStream .aStream nextPutAll: ' on '.base printOn: aStream ! !DirectShape subclass: #Cylinder	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!Cylinder methodsFor: 'initialization' stamp: 'RostyslvaBoichuk 10/24/2022 22:08'!initialize  base := Circle new. height := 3! !!Cylinder methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 22:20'!printOn: aStreamaStream nextPutAll: 'Cylinder of height '.height printOn: aStream .aStream nextPutAll: ' on '.base printOn: aStream ! !VolShape subclass: #Piramid	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!Piramid methodsFor: 'calculations' stamp: 'RostyslvaBoichuk 10/24/2022 20:25'!volume 1/3 base area  * height ! !!Piramid methodsFor: 'initialization' stamp: 'RostyslvaBoichuk 10/24/2022 22:16'!initialize  base := Square  new. height := 1! !!Piramid methodsFor: 'printing' stamp: 'RostyslvaBoichuk 10/24/2022 20:25'!printOn: aStreamaStream nextPutAll: 'Piramid of height '.height printOn: aStream .base area printOn: aStream .aStream nextPutAll: ' on '.base printOn: aStream ! !DirectShape subclass: #Prizm	instanceVariableNames: ''	classVariableNames: ''	package: 'MyShapes'!!Prizm methodsFor: 'printing' stamp: 'SergYaroshko 10/11/2022 17:29'!printOn: aStream aStream nextPutAll: 'Triangular prizm'! !